#!/usr/bin/env python
'''TimeRasp command
2014 Mendez

# ephem, httplib2, "flickrapi<2.0", exifread, poster, apiclient, urllib3, jinja2
apiclient (1.0.2)
argparse (1.2.1)
chardet (2.3.0)
colorama (0.3.2)
ephem (3.7.6.0)
ExifRead (2.1.2)
flickrapi (1.4.5)
html5lib (0.999)
httplib2 (0.9.2)
Jinja2 (2.8)
MarkupSafe (0.23)
ndg-httpsclient (0.3.2)
pip (1.5.6)
poster (0.8.1)
pyasn1 (0.1.7)
pyOpenSSL (0.13.1)
requests (2.4.3)
RPi.GPIO (0.6.0a3)
setuptools (5.5.1)
six (1.8.0)
urllib3 (1.9.1)
wheel (0.24.0)
wsgiref (0.1.2)
./timerasp start night daily norun
'''

import os
import sys
import time
import json
import ephem
import random
import socket
import httplib
import httplib2
import calendar
import datetime
import subprocess
import traceback
from jinja2 import Template
from timerasp import gmail, flickr, youtube, music


# Do not emit emails, or attempt to send the videos to flickr/youtube
OFFLINE = ('offline' in sys.argv)

# Longer exposures and different start times
NIGHT = ('night' in sys.argv)

# add in music tracks
MUSIC = ('music' in sys.argv)

# Daily saves
DAILY = ('daily' in sys.argv)

# Do not run video command -- for debug of description
NORUN = ('norun' in sys.argv)

# debug
DEBUG = ('debug' in sys.argv)

# make the output video private -- for debug
PRIVATE = ('private' in sys.argv)

# Do not wait for sunrise, just start the video right away for debug
START = ('start' in sys.argv)


# Some nice things 
NOW = datetime.datetime.now()
RUNINT = calendar.timegm(time.gmtime())

# LAT, LON = '48.457213','-122.882080'
WAVEBAND = 'optical'
# TAGS = 'timerasp, timelapse, "raspberry pi"'

# WAVEBAND = 'IR'
LAT, LON = '39.331628', '-76.623434' # JHU
TAGS = 'timerasp, timelapse, maryland, baltimore, JHU, "raspberry pi"'

# Set some nice settings
MAIN_SETTINGS = '-h 1072 -w 1920 -n' # no preview
CONVERT_SETTINGS = '-fps 24'
if NIGHT:
    PREFIX = 'night'
    OLDPREFIX = 'previous_night'
    NIGHT_START = 22   # 10pm
    NIGHT_DURATION = 6 # hours -> 4am
    # EXTRA_SETTINGS = '-ss 5000000 -ISO 1600'
    EXTRA_SETTINGS = '-awb auto -ex verylong -ISO 800 -drc medium -st -ae 10,0x00,0x8080FF -a 28 '
else:
    PREFIX = 'todays'
    OLDPREFIX = 'previous'
    if WAVEBAND == 'IR':
        EXTRA_SETTINGS = '-awb auto -ex verylong'
    else:
        EXTRA_SETTINGS = '-awb auto'


RPI_ENCODE = os.path.expanduser('~/tmp/timelapse/rpi-openmax-demos-master/rpi-encode-yuv')
OUT_DIR = os.path.expanduser('~/tmp/timelapse')
DAILY_DIR = os.path.expanduser('~/video_archive/')
H264_FILENAME = os.path.join(OUT_DIR, '%s_video.h264'%PREFIX)
MP4_FILENAME = H264_FILENAME.replace('.h264', '.mp4')
PREVIOUS_FILENAME = MP4_FILENAME.replace(PREFIX, OLDPREFIX)
DAILY_FILENAME = os.path.join(DAILY_DIR, '%d_video.mp4'%RUNINT)
DAILY_JSONFILE = DAILY_FILENAME.replace('_video.mp4','_info.json')

# Some nice templates
TITLE_TEMPLATE = Template(u'{% if NIGHT %}{{prefix.capitalize()}} {% endif %}'
                          u'{% if waveband.__len__() > 2 %}{{waveband.capitalize()}}{% else %}{{waveband}}{% endif %}'
                          u' {{sunrise.strftime("%Y-%m-%d")}} Timelapse')

DESCRIPTION_TEMPLATE = Template(u'{% if NIGHT %}{{prefix.capitalize()}} {% endif %}'
                                u'{% if waveband.__len__() > 2 %}{{waveband.capitalize()}} {% else %}{{waveband}} {% endif %}'
                                u'time-lapse video from a Raspberry PI'
                                '''

  Hostname: {{hostname}}
  Run Time: {{runint}}
  Sunrise: {{sunrise}}
  Sunset: {{sunset}}
  delta: {{ "%0.2f" % (frame_time/1000.0)}} seconds'''
  '{% if capture_time %}\n  Captured Time: {{capture_time}} {% endif %}'
  '{% if youtube_id %}\n  Youtube: http://youtu.be/{{youtube_id}} (higher resolution and nicer playback){% endif %}'
  '{% if musictext %} \n\n{{musictext}} {% endif %}'
)

EMAIL_TITLE_TEMPLATE = Template(u'{{ hostname }} Time-lapse : {{message}}')

EMAIL_BODY_TEMPLATE = Template(u'{{body}}\n\n {{description}}')

INFO_TEMPLATE = Template(u'''
    Video Title: {{title}}
    Video Description: {{description}}

 [info]
    Delay: {{ "%0.2f" % (sleep_time / 3600.0) }} hr [{{ "%0.2f" % (sleep_time) }} s]

 [commands]
    Record Command: {{ record_cmd }}
    
    Convert Command: {{ convert_cmd }}
    
''')


# the commands
RECORD_COMMAND = Template(u'raspiyuv {{extra_settings}} {{main_settings}}'
                          u' -t {{video_length}} -tl {{frame_time}} -o -'
                          ' | {{encoder}} > {{filename}}')
CONVERT_COMMAND = Template(u'MP4Box {{convert_settings}}'
                           u'{% if musicfile %} -add {{musicfile}}#audio {% endif %}'
                           u' -add {{filename}} {{mp4filename}}')
RSYNC_COMMAND = Template(u'rsync -ravpP {{mp4filename}} {{dailyfilename}}')


# --------------------









def check_diskspace(freespace=1, outdir=OUT_DIR):
    '''Raises an Error if there is not at least {freespace}GB
    of free space left in the output_dir: {outdir}'''.format(**locals())
    s = os.statvfs(outdir)
    space = (s.f_bavail * s.f_frsize) / 2.0**30 # GB
    assert space > freespace, \
        'Free Space [{}GB] is less than required [{}GB] in directory: {}.'.format(
            space, freespace, outdir)


def get_times(delta_before=60, delta_after=120):
    '''Attempt to get the right start and ending times.
    delta_before = {delta_before} minutes before sunrise to start the video.
    delta_after = {delta_after} minutes after sunrise to start the video.
    '''.format(**locals())
    
    here = ephem.Observer()
    here.lon, here.lat = LON, LAT
    sunrise = here.next_rising(ephem.Sun())
    sunrise = ephem.localtime(sunrise) - datetime.timedelta(minutes=delta_before)
    sunset = here.next_setting(ephem.Sun())
    sunset = ephem.localtime(sunset) + datetime.timedelta(minutes=delta_after)
    
    # Force the start to happen now, if requested
    # or if the day has already started
    # TODO correct in changing this (sunrise > ephem.localtime(sunset)) ??
    if (sunrise > sunset) or (sunrise < NOW) or (START):
        sunrise = NOW
    
    # if we are doing a night start at 10 and record for 6 hrs
    if NIGHT:
        sunrise = datetime.datetime(NOW.year, NOW.month, NOW.day, NIGHT_START)
        if START:
            sunrise = NOW
        
        sunset = sunrise + datetime.timedelta(hours=NIGHT_DURATION)
        if (sunrise > sunset) or (START):
            sunrise = NOW
    
    return sunrise, sunset


def video_properties():
    '''Returns a dictionary of properties of the video in "nice" units.
    sunrise, sunset: start and stop datetimes
    sleep_time: how long to wait for the capture
    
    video_length: milliseconds of video to capture
    frame_time: miliseconds per frame
    total_frames: number of frames to capture
    
    '''
    
    sunrise, sunset = get_times()
    
    # length of the video in miliseconds
    video_length = int((sunset - sunrise).total_seconds() * 1000)
    
    # Total number of frames  (5 minutes )
    total_frames = 5 * 60 * 24
    if NIGHT:
        total_frames = 2 * 60 * 24
    
    # time between frames
    frame_time = video_length / total_frames
    if NIGHT:
        frame_time = 12 * 1000
  
    # ensure some sort of sanity
    min_frame_time = 5*1000 # Minimum 5 seconds between frames
    if frame_time < min_frame_time:
        frame_time = min_frame_time
    
    if DEBUG:
        # frame every 5 seconds
        # Record for a total of 4 minute
        # gives ~ 2 seconds of film
        frame_time = 5 * 1000
        video_length = 4 * 60 * 1000
        sunset = sunrise + datetime.timedelta(seconds=video_length / 1000)
    
    
    sleep_time = (sunrise - NOW).total_seconds()
    
    # for simplicity of the templateing
    encoder = RPI_ENCODE
    filename = H264_FILENAME
    main_settings = MAIN_SETTINGS
    extra_settings = EXTRA_SETTINGS
    convert_settings = CONVERT_SETTINGS
    mp4filename = MP4_FILENAME
    dailyfilename = DAILY_FILENAME
    
    return locals()


def video_description(**kwargs):
    '''Generate some nice video description text'''
    props = dict(
        prefix=PREFIX,
        waveband=WAVEBAND,
        runint=RUNINT,
        hostname=socket.gethostname(),
        starttime=NOW,
    )
    props.update(kwargs)

    # probably a better way, but lets just reissue props
    tmp = dict(
        tags = TAGS,
        title = TITLE_TEMPLATE.render(**props),
        description = DESCRIPTION_TEMPLATE.render(**props)
    )
    props.update(tmp)
    
    return props

def add_music(**kwargs):
    if MUSIC:
        sunrise = kwargs['sunrise']
        length = kwargs['video_length']/kwargs['frame_time']/24
        # tmp = music.get_date(sunrise, length)
        tmp = music.get_random_trackset(sunrise, length)
        kwargs['musicfile'] = tmp['musicfile']
        kwargs['musictext'] = tmp['musictext']
    
    return video_description(**kwargs)

def save_info(**kwargs):
    output = dict(
        sunrise='%s'%kwargs['sunrise'],
        sunset='%s'%kwargs['sunset'],
        waveband=kwargs['waveband'],
        prefix=kwargs['prefix'],
        runtime=kwargs['runint'],
        frame_time=kwargs['frame_time']/1000.0,
        video_length=kwargs['video_length'],
        sleep_time=kwargs['sleep_time'],
        title=kwargs['title'],
        description=kwargs['description'],
        tags=kwargs['tags'],
        hostname=kwargs['hostname'],
    )
    json.dump(output, open(DAILY_JSONFILE,'w'), indent=2)

def save_h264backup():
    # backup if something went wrong.
    if os.path.exists(H264_FILENAME):
        tmp = '.{:d}.h264'.format(calendar.timegm(time.gmtime()))
        cmd = 'rsync -ravpP {} {}'.format(H264_FILENAME, 
                                          H264_FILENAME.replace('.h264',tmp))
        call(cmd)
    



def timelapse_notify(message, body=None, **kwargs):
    if body is None:
        body = kwargs.get('description', '')
    tmp = dict(
        message=message,
        body=body
    )
    tmp.update(kwargs)
    print ' Note: %s'%message
    if not OFFLINE:
        try:
            gmail.send_email(EMAIL_TITLE_TEMPLATE.render(tmp),
                             EMAIL_BODY_TEMPLATE.render(tmp) )
        except Exception as e:
            print 'Could not send email: {}'.format(e)
    else:
        print '--- Sending email --- \n TITLE: {}\n{}\n ------'.format(EMAIL_TITLE_TEMPLATE.render(tmp),
                                                              EMAIL_BODY_TEMPLATE.render(tmp))
        
        

class Errors(object):
    def __init__(self):
        self.errors = []
    def __len__(self):
        return len(self.errors)
    def set(self, error):
        self.errors.append(error)
    def get(self):
        if len(self.errors) > 0:
            return '----ERRORS----\n' + '\n++++\n'.join(self.errors)
ERRORS = Errors()
    

def message(success, failure, strict=False):
    global ERRORS
    def wrapper(function):
        def run(*args, **kwargs):
            try:
                tmp = function(*args, **kwargs)
                
                if (len(ERRORS) > 0) & strict:
                    raise Exception('Problem in run!')
                else:
                    timelapse_notify(success, **kwargs)
                return tmp
            except Exception as e:
                ERRORS.set(traceback.format_exc().strip())
                error = ERRORS.get()
                
                note = 'ERROR' if strict else 'WARN'
                timelapse_notify('{} {}'.format(note, failure), error, **kwargs)
                if strict:
                    raise
        return run
    return wrapper




def call(cmd, strict=False):
    try:
        print 'Running:\n%s'%cmd
        print subprocess.check_output(cmd, shell=True)
    except Exception as e:
        # ERRORS.append([e])
        if strict:
            raise


@message('Uploaded to Youtube!', 'Youtube Problem')
def upload_youtube(video_text):
    '''return id to update flickr'''
    print 'Uploading to Youtube'
    video_text  = video_description(**video_text)
    youtube_id = youtube.upload(video_text['mp4filename'],
                                video_text['title'],
                                video_text['description'],
                                video_text['tags'],
                                private=PRIVATE)
    video_text['youtube_id'] = youtube_id
    return video_text

@message('Uploaded to Flickr!', 'Flickr Problem')
def upload_flickr(video_text):
    '''upload to flickr'''
    print 'Uploading to Flickr'
    video_text['tags'] = video_text['tags'].replace(',', ' ')
    video_text  = video_description(**video_text)
    flickr.upload(video_text['mp4filename'],
                  video_text['title'],
                  video_text['description'],
                  video_text['tags'],
                  private=PRIVATE)
    return video_text



def sleep(runtime, check=10, unit='minute'):
    '''Sleep with ten minute interval checks'''
    
    if unit == 'minute':
        u = 60
    elif unit == 'second':
        u = 1
    else:
        raise ValueError('Specify units of second/minute')
    
    while True:
        now = datetime.datetime.now()
        delta = (runtime-now).total_seconds()
        if now >= runtime:
            # alarm, we are here
            break
        elif delta < check*u:
            # Finer checks close to the time
            check = 1
        elif (delta%(60*u)) <= (check*u):
            print '{:0.1f} {}s left'.format(delta/u, unit),
        else:
            # wait
            print '.',
        time.sleep(check*u)

def test_sleep():
    alarm = NOW + datetime.timedelta(seconds=150)
    sleep(alarm, check=5, unit='second')
    print 'Done!'







@message('testing', 'failing')
def test(**kwargs):
    print 'running test'


# @message('Time-lapse finished')
@message('Finished. Everything ok?', 'Problem in run!', strict=True)
def main():
    '''Main program -- Attempts to record a video from before sunrise
    to after sunset and upload the results to youtube and flickr '''
    
    # Ensure that we have enough space
    check_diskspace()
    
    # Get video Properties
    video_props = video_properties()
    video_text  = video_description(**video_props)
    video_text  = add_music(**video_text)
    
    # get the commands
    record = RECORD_COMMAND.render(**video_text)
    convert = CONVERT_COMMAND.render(**video_text)
    rsync = RSYNC_COMMAND.render(**video_props)
    
    
    info = INFO_TEMPLATE.render(record_cmd=record,convert_cmd=convert,**video_text)
    print(info)
    if NORUN:
        return
    
    # Save information about run
    save_info(**video_text)
    
    # TODO backup h264 on errors
    save_h264backup()
    
    # Wait untill ready
    timelapse_notify('Time-lapse Sleeping', 'Waiting...\n%s'%info)
    sleep(video_props['sunrise'])
    # time.sleep(video_props['sleep_time'])
    
    
    # Record the data
    timelapse_notify('Time-lapse Start!', 'PI is recording\n%s'%video_text['description'])
    call(record, strict=True)
    video_text['capture_time'] = datetime.datetime.now()
    
    
    # timeing is not crucial below here
    call(convert)
    
    # make sure that we have something
    assert os.path.exists(MP4_FILENAME), \
           'Required file is missing: %s'%MP4_FILENAME
    
    if DAILY:
        call(rsync)
    
    # Upload 
    if not OFFLINE:
        video_text = upload_youtube(video_text)
        save_info(**video_text) # flickr breaks things
        video_text = upload_flickr(video_text)
    
    
    
    # Cleanup 
    try:
        os.remove(H264_FILENAME)
        os.rename(MP4_FILENAME, PREVIOUS_FILENAME)
    except Exception as e:
        print 'Could not clean up: %s'%e


# @message('relax ok', 'relax problem')
# def relax():
#     raise ValueError('Ok ERROR')
#
# @message('Everything ok?', 'Problem!', strict=True)
# def debug():
#     relax()
#     assert True==False

if __name__ == '__main__':
  main()
  # test_sleep()
  
  
